(()=>{var t={724:(t,r,s)=>{t=s.nmd(t);const{BitSet:e}=t["./sets.cjs"],n={};n["sets.cjs"]=function(){const t={};return t.BitSet=e,t}(),n["stats.cjs"]=function(){const t={},r=(t,r)=>t+r,s=t=>t*t;return t.mean=function(t){return r(...t)/t.length},t.stddev=function(e){const n=t.mean(e);return Math.sqrt(r(...e.map(s))/e.length-s(n))},t}()},800:t=>{class r{has(t){throw new Error("Abstract method")}}class s extends r{get size(){throw new Error("Abstract method")}[Symbol.iterator](){throw new Error("Abstract method")}isEmpty(){return 0===this.size}toString(){return`{${Array.from(this).join(", ")}}`}equals(t){if(!(t instanceof s))return!1;if(this.size!==t.size)return!1;for(const r of this)if(!t.has(r))return!1;return!0}}Symbol.iterator;class e extends s{insert(t){throw new Error("Abstract method")}remove(t){throw new Error("Abstract method")}add(t){for(const r of t)this.insert(r)}subtract(t){for(const r of t)this.remove(r)}intersect(t){for(const r of t)t.has(r)||this.remove(r)}}class n extends e{constructor(t){super(),this.max=t,this.n=0,this.numBytes=Math.floor(t/8)+1,this.data=new Uint8Array(this.numBytes)}_valid(t){return Number.isInteger(t)&&t>=0&&t<=this.max}_has(t,r){return 0!==(this.data[t]&n.bits[r])}has(t){if(this._valid(t)){const r=Math.floor(t/8),s=t%8;return this._has(r,s)}return!1}insert(t){if(!this._valid(t))throw new TypeError("Invalid set element: "+t);{const r=Math.floor(t/8),s=t%8;this._has(r,s)||(this.data[r]|=n.bits[s],this.n++)}}remove(t){if(!this._valid(t))throw new TypeError("Invalid set element: "+t);{const r=Math.floor(t/8),s=t%8;this._has(r,s)&&(this.data[r]&=n.masks[s],this.n--)}}get size(){return this.n}*[Symbol.iterator](){for(let t=0;t<=this.max;t++)this.has(t)&&(yield t)}}n.bits=new Uint8Array([1,2,4,8,16,32,64,128]),n.masks=new Uint8Array([-2,-3,-5,-9,-17,-33,-65,-129]),t.exports={BitSet:n}}},r={};function s(e){var n=r[e];if(void 0!==n)return n.exports;var o=r[e]={id:e,loaded:!1,exports:{}};return t[e](o,o.exports,s),o.loaded=!0,o.exports}s.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);const e=s(724);let n=new(s(800))(100);n.insert(10),n.insert(20),n.insert(30);let o=e.mean([...n]);console.log(o)})();